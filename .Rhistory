if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
library(ggplot2)
# Function to check collision between two objects
check_collision <- function(obj1, obj2) {
distance <- sqrt((obj1$x - obj2$x)^2 + (obj1$y - obj2$y)^2)
return(distance < obj1$radius + obj2$radius)
}
# Function to update object positions and check for collisions
update_objects <- function(objects) {
for (i in seq_along(objects)) {
objects[[i]]$x <- objects[[i]]$x + objects[[i]]$velocity[1]
objects[[i]]$y <- objects[[i]]$y + objects[[i]]$velocity[2]
}
for (i in seq_along(objects)) {
for (j in seq(i + 1, length(objects))) {
if (check_collision(objects[[i]], objects[[j]])) {
objects[[i]]$color <- "red"
objects[[j]]$color <- "red"
}
}
}
return(objects)
}
# Create initial space objects
create_object <- function() {
radius <- sample(5:20, 1)
x <- sample(radius:(800 - radius), 1)
y <- sample(radius:(600 - radius), 1)
color <- "white"
velocity <- c(runif(1, -0.5, 0.5), runif(1, -0.5, 0.5))
return(list(x = x, y = y, radius = radius, color = color, velocity = velocity))
}
# Function to update object positions and check for collisions
update_objects <- function(objects) {
for (i in seq_along(objects)) {
objects[[i]]$x <- objects[[i]]$x + objects[[i]]$velocity[1]
objects[[i]]$y <- objects[[i]]$y + objects[[i]]$velocity[2]
}
for (i in seq_along(objects)) {
for (j in seq_along(objects)) {
if (i != j && check_collision(objects[[i]], objects[[j]])) {
objects[[i]]$color <- "red"
objects[[j]]$color <- "red"
}
}
}
return(objects)
}
objects <- replicate(10, create_object(), simplify = FALSE)
# Main simulation loop
for (iteration in 1:100) {
objects <- update_objects(objects)
# Visualize objects
ggplot() +
theme_void() +
geom_circle(data = objects, aes(x0 = x, y0 = y, r = radius, fill = color), color = "black") +
scale_fill_manual(values = c("white", "red")) +
theme(legend.position = "none") +
xlim(0, 800) + ylim(0, 600) +
ggtitle(paste("Iteration:", iteration)) +
ggsave(paste("iteration_", iteration, ".png", sep = ""), width = 8, height = 6)
}
library(ggplot2)
# Function to check collision between two objects
check_collision <- function(obj1, obj2) {
distance <- sqrt((obj1$x - obj2$x)^2 + (obj1$y - obj2$y)^2)
return(distance < obj1$radius + obj2$radius)
}
# Function to update object positions and check for collisions
update_objects <- function(objects) {
for (i in seq_along(objects)) {
objects[[i]]$x <- objects[[i]]$x + objects[[i]]$velocity[1]
objects[[i]]$y <- objects[[i]]$y + objects[[i]]$velocity[2]
}
for (i in seq_along(objects)) {
for (j in seq(i + 1, length(objects))) {
if (check_collision(objects[[i]], objects[[j]])) {
objects[[i]]$color <- "red"
objects[[j]]$color <- "red"
}
}
}
return(objects)
}
# Create initial space objects
create_object <- function() {
radius <- sample(5:20, 1)
x <- sample(radius:(800 - radius), 1)
y <- sample(radius:(600 - radius), 1)
color <- "white"
velocity <- c(runif(1, -0.5, 0.5), runif(1, -0.5, 0.5))
return(list(x = x, y = y, radius = radius, color = color, velocity = velocity))
}
# Function to update object positions and check for collisions
update_objects <- function(objects) {
for (i in seq_along(objects)) {
objects[[i]]$x <- objects[[i]]$x + objects[[i]]$velocity[1]
objects[[i]]$y <- objects[[i]]$y + objects[[i]]$velocity[2]
}
for (i in seq_along(objects)) {
for (j in seq_along(objects)) {
if (i != j && check_collision(objects[[i]], objects[[j]])) {
objects[[i]]$color <- "red"
objects[[j]]$color <- "red"
}
}
}
return(objects)
}
objects <- replicate(10, create_object(), simplify = FALSE)
# Main simulation loop
for (iteration in 1:100) {
objects <- update_objects(objects)
# Visualize objects
ggplot() +
theme_void() +
geom_circle(data = objects, aes(x0 = x, y0 = y, r = radius, fill = color), color = "black") +
scale_fill_manual(values = c("white", "red")) +
theme(legend.position = "none") +
xlim(0, 800) + ylim(0, 600) +
ggtitle(paste("Iteration:", iteration)) +
ggsave(paste("iteration_", iteration, ".png", sep = ""), width = 8, height = 6)
}
install.packages("ggplot")
library(ggplot2)
# Function to check collision between two objects
check_collision <- function(obj1, obj2) {
distance <- sqrt((obj1$x - obj2$x)^2 + (obj1$y - obj2$y)^2)
return(distance < obj1$radius + obj2$radius)
}
# Function to update object positions and check for collisions
update_objects <- function(objects) {
for (i in seq_along(objects)) {
objects[[i]]$x <- objects[[i]]$x + objects[[i]]$velocity[1]
objects[[i]]$y <- objects[[i]]$y + objects[[i]]$velocity[2]
}
for (i in seq_along(objects)) {
for (j in seq(i + 1, length(objects))) {
if (check_collision(objects[[i]], objects[[j]])) {
objects[[i]]$color <- "red"
objects[[j]]$color <- "red"
}
}
}
return(objects)
}
# Create initial space objects
create_object <- function() {
radius <- sample(5:20, 1)
x <- sample(radius:(800 - radius), 1)
y <- sample(radius:(600 - radius), 1)
color <- "white"
velocity <- c(runif(1, -0.5, 0.5), runif(1, -0.5, 0.5))
return(list(x = x, y = y, radius = radius, color = color, velocity = velocity))
}
# Function to update object positions and check for collisions
update_objects <- function(objects) {
for (i in seq_along(objects)) {
objects[[i]]$x <- objects[[i]]$x + objects[[i]]$velocity[1]
objects[[i]]$y <- objects[[i]]$y + objects[[i]]$velocity[2]
}
for (i in seq_along(objects)) {
for (j in seq_along(objects)) {
if (i != j && check_collision(objects[[i]], objects[[j]])) {
objects[[i]]$color <- "red"
objects[[j]]$color <- "red"
}
}
}
return(objects)
}
objects <- replicate(10, create_object(), simplify = FALSE)
# Main simulation loop
for (iteration in 1:100) {
objects <- update_objects(objects)
# Visualize objects
ggplot() +
theme_void() +
geom_circle(data = objects, aes(x0 = x, y0 = y, r = radius, fill = color), color = "black") +
scale_fill_manual(values = c("white", "red")) +
theme(legend.position = "none") +
xlim(0, 800) + ylim(0, 600) +
ggtitle(paste("Iteration:", iteration)) +
ggsave(paste("iteration_", iteration, ".png", sep = ""), width = 8, height = 6)
}
install.packages("Rcpp")
install.packages("ggplot2")
library(Rcpp)
library(ggplot2)
# Function to check collision between two objects
check_collision <- function(obj1, obj2) {
distance <- sqrt((obj1$x - obj2$x)^2 + (obj1$y - obj2$y)^2)
return(distance < obj1$radius + obj2$radius)
}
# Function to update object positions and check for collisions
update_objects <- function(objects) {
for (i in seq_along(objects)) {
objects[[i]]$x <- objects[[i]]$x + objects[[i]]$velocity[1]
objects[[i]]$y <- objects[[i]]$y + objects[[i]]$velocity[2]
}
for (i in seq_along(objects)) {
for (j in seq(i + 1, length(objects))) {
if (check_collision(objects[[i]], objects[[j]])) {
objects[[i]]$color <- "red"
objects[[j]]$color <- "red"
}
}
}
return(objects)
}
# Create initial space objects
create_object <- function() {
radius <- sample(5:20, 1)
x <- sample(radius:(800 - radius), 1)
y <- sample(radius:(600 - radius), 1)
color <- "white"
velocity <- c(runif(1, -0.5, 0.5), runif(1, -0.5, 0.5))
return(list(x = x, y = y, radius = radius, color = color, velocity = velocity))
}
# Function to update object positions and check for collisions
update_objects <- function(objects) {
for (i in seq_along(objects)) {
objects[[i]]$x <- objects[[i]]$x + objects[[i]]$velocity[1]
objects[[i]]$y <- objects[[i]]$y + objects[[i]]$velocity[2]
}
for (i in seq_along(objects)) {
for (j in seq_along(objects)) {
if (i != j && check_collision(objects[[i]], objects[[j]])) {
objects[[i]]$color <- "red"
objects[[j]]$color <- "red"
}
}
}
return(objects)
}
objects <- replicate(10, create_object(), simplify = FALSE)
# Main simulation loop
for (iteration in 1:100) {
objects <- update_objects(objects)
# Visualize objects
ggplot() +
theme_void() +
geom_circle(data = objects, aes(x0 = x, y0 = y, r = radius, fill = color), color = "black") +
scale_fill_manual(values = c("white", "red")) +
theme(legend.position = "none") +
xlim(0, 800) + ylim(0, 600) +
ggtitle(paste("Iteration:", iteration)) +
ggsave(paste("iteration_", iteration, ".png", sep = ""), width = 8, height = 6)
}
search()
library(ggplot2)
search()
install.packages("Rcpp")
install.packages("ggplot2")
library(Rcpp)
library(ggplot2)
search()
library(ggplot2)
search()
# Function to check collision between two objects
check_collision <- function(obj1, obj2) {
distance <- sqrt((obj1$x - obj2$x)^2 + (obj1$y - obj2$y)^2)
return(distance < obj1$radius + obj2$radius)
}
# Function to update object positions and check for collisions
update_objects <- function(objects) {
for (i in seq_along(objects)) {
objects[[i]]$x <- objects[[i]]$x + objects[[i]]$velocity[1]
objects[[i]]$y <- objects[[i]]$y + objects[[i]]$velocity[2]
}
for (i in seq_along(objects)) {
for (j in seq(i + 1, length(objects))) {
if (check_collision(objects[[i]], objects[[j]])) {
objects[[i]]$color <- "red"
objects[[j]]$color <- "red"
}
}
}
return(objects)
}
# Create initial space objects
create_object <- function() {
radius <- sample(5:20, 1)
x <- sample(radius:(800 - radius), 1)
y <- sample(radius:(600 - radius), 1)
color <- "white"
velocity <- c(runif(1, -0.5, 0.5), runif(1, -0.5, 0.5))
return(list(x = x, y = y, radius = radius, color = color, velocity = velocity))
}
# Function to update object positions and check for collisions
update_objects <- function(objects) {
for (i in seq_along(objects)) {
objects[[i]]$x <- objects[[i]]$x + objects[[i]]$velocity[1]
objects[[i]]$y <- objects[[i]]$y + objects[[i]]$velocity[2]
}
for (i in seq_along(objects)) {
for (j in seq_along(objects)) {
if (i != j && check_collision(objects[[i]], objects[[j]])) {
objects[[i]]$color <- "red"
objects[[j]]$color <- "red"
}
}
}
return(objects)
}
objects <- replicate(10, create_object(), simplify = FALSE)
# Main simulation loop
for (iteration in 1:100) {
objects <- update_objects(objects)
# Visualize objects
ggplot2() +
theme_void() +
geom_circle(data = objects, aes(x0 = x, y0 = y, r = radius, fill = color), color = "black") +
scale_fill_manual(values = c("white", "red")) +
theme(legend.position = "none") +
xlim(0, 800) + ylim(0, 600) +
ggtitle(paste("Iteration:", iteration)) +
ggsave(paste("iteration_", iteration, ".png", sep = ""), width = 8, height = 6)
}
install.packages("ggplot2")
library(ggplot2)
search()
# Function to check collision between two objects
check_collision <- function(obj1, obj2) {
distance <- sqrt((obj1$x - obj2$x)^2 + (obj1$y - obj2$y)^2)
return(distance < obj1$radius + obj2$radius)
}
# Function to update object positions and check for collisions
update_objects <- function(objects) {
for (i in seq_along(objects)) {
objects[[i]]$x <- objects[[i]]$x + objects[[i]]$velocity[1]
objects[[i]]$y <- objects[[i]]$y + objects[[i]]$velocity[2]
}
for (i in seq_along(objects)) {
for (j in seq(i + 1, length(objects))) {
if (check_collision(objects[[i]], objects[[j]])) {
objects[[i]]$color <- "red"
objects[[j]]$color <- "red"
}
}
}
return(objects)
}
# Create initial space objects
create_object <- function() {
radius <- sample(5:20, 1)
x <- sample(radius:(800 - radius), 1)
y <- sample(radius:(600 - radius), 1)
color <- "white"
velocity <- c(runif(1, -0.5, 0.5), runif(1, -0.5, 0.5))
return(list(x = x, y = y, radius = radius, color = color, velocity = velocity))
}
# Function to update object positions and check for collisions
update_objects <- function(objects) {
for (i in seq_along(objects)) {
objects[[i]]$x <- objects[[i]]$x + objects[[i]]$velocity[1]
objects[[i]]$y <- objects[[i]]$y + objects[[i]]$velocity[2]
}
for (i in seq_along(objects)) {
for (j in seq_along(objects)) {
if (i != j && check_collision(objects[[i]], objects[[j]])) {
objects[[i]]$color <- "red"
objects[[j]]$color <- "red"
}
}
}
return(objects)
}
objects <- replicate(10, create_object(), simplify = FALSE)
# Main simulation loop
for (iteration in 1:100) {
objects <- update_objects(objects)
# Visualize objects
ggplot() +
theme_void() +
geom_circle(data = objects, aes(x0 = x, y0 = y, r = radius, fill = color), color = "black") +
scale_fill_manual(values = c("white", "red")) +
theme(legend.position = "none") +
xlim(0, 800) + ylim(0, 600) +
ggtitle(paste("Iteration:", iteration)) +
ggsave(paste("iteration_", iteration, ".png", sep = ""), width = 8, height = 6)
}
